import datetime
import pyodbc
import json
import requests
from flask import Flask, request

headers = {
        'x-rapidapi-key': "7e42ba408cmsh7dc537620746ae5p1b1daajsn7e244db67302",
        'x-rapidapi-host': "api-football-beta.p.rapidapi.com"
    }

class season_params:
    leagueId = "2" #World Cup = "1"
    seasonId = "2021"
    date_from = "2021-09-12"
    date_to = "2022-07-01"

class db_params:
    driver = '{SQL Server}'
    server = 'IL-ASAFS-OTT\SQLEXPRESS'
    database = 'db_better_alpha'
    params = 'Trusted_Connection=True'

class rules:
    toto = 4
    perfect_gs = 2
    toto_gs = 6
    perfect_gs = 3
    qual_eight = 5
    qual_quar = 8
    qual_half = 10
    qual_final = 10
    goal_gs = 3
    goal_ko = 5
    winner_org = 25

class sync_time:
    matches_lastrun = datetime.datetime.now() - datetime.timedelta(0,0,0,0,5)
    results_last_run = datetime.datetime.now() - datetime.timedelta(0,0,0,0,5)
    scorer_lastrun = datetime.datetime.now() - datetime.timedelta(0,0,0,0,5)

def db_put(sql_query, params):
    conn = pyodbc.connect('Driver={};Server={};Database={};{};'.format(db_params.driver,db_params.server,db_params.database,db_params.params))
    cursor = conn.cursor()
    cursor.execute(sql_query, params)
    cursor.close()
    conn.commit()
    conn.close()

def db_pull_val(sql_query, params):
    conn = pyodbc.connect('Driver={};Server={};Database={};{};'.format(db_params.driver, db_params.server, db_params.database, db_params.params))
    cursor = conn.cursor()
    cursor.execute(sql_query, params)
    value = cursor.fetchval()
    response = json.dumps(value)
    cursor.close()
    conn.commit()
    conn.close()
    return response

def db_pull_list(sql_query, params):
    conn = pyodbc.connect('Driver={};Server={};Database={};{};'.format(db_params.driver, db_params.server, db_params.database, db_params.params))
    cursor = conn.cursor()
    cursor.execute(sql_query, params)
    list = [i[0] for i in cursor.fetchall()]
    response = json.dumps(list)
    cursor.close()
    conn.commit()
    conn.close()
    return response

def intcheck(key):
    if isinstance(key, int):
        x = key
    else:
        x = None
    return x
